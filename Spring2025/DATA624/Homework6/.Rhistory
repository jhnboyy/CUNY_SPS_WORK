for(i in 2:100)
y2[i] <- 0.3*y2[i-1] + e[i]
sim2 <- tsibble(idx = seq_len(100), y = y2, index = idx)
## With 0.3
print(sim2 |> autoplot())
## Running agina with different coef.
y3 <- numeric(100)
for(i in 2:100)
y3[i] <- 0.9*y3[i-1] + e[i]
sim3 <- tsibble(idx = seq_len(100), y = y3, index = idx)
print(sim3 |> autoplot())
print(sim |> autoplot())
### Running again with a different coefficients#
#y2 <- numeric(100)
#for(i in 2:100)
#  y2[i] <- 0.3*y2[i-1] + e[i]
#sim2 <- tsibble(idx = seq_len(100), y = y2, index = idx)
## With 0.3
print(sim2 |> autoplot())
## Running agina with different coef.
#y3 <- numeric(100)
#for(i in 2:100)
#  y3[i] <- 0.9*y3[i-1] + e[i]
#sim3 <- tsibble(idx = seq_len(100), y = y3, index = idx)
print(sim3 |> autoplot())
### Running again with a different coefficients#
y2_neg <- numeric(100)
for(i in 2:100)
y2_neg[i] <- -0.3*y2_neg[i-1] + e[i]
sim2_neg <- tsibble(idx = seq_len(100), y = y2_neg, index = idx)
## With -0.3
print(sim2_neg |> autoplot())
## Running agina with different coef.
y3_neg <- numeric(100)
for(i in 2:100)
y3_neg[i] <- -0.9*y3_neg[i-1] + e[i]
sim3_neg <- tsibble(idx = seq_len(100), y = y3_neg, index = idx)
print(sim3_neg |> autoplot())
## PUTING THEM ALL TOGETHER FOR A CLEAN COMPARISON
combined_sim <- bind_rows(
sim  |> mutate(coef = "0.6"),
sim2 |> mutate(coef = "0.3"),
sim3 |> mutate(coef = "0.9"),
sim2_neg |> mutate(coef = "-0.3"),
sim_neg |> mutate(coef = "-0.6"),
sim3_neg |> mutate(coef = "-0.9")
)
## Running again with a different coefficients#
y_neg <- numeric(100)
for(i in 2:100)
y_neg[i] <- -0.6*y_neg[i-1] + e[i]
sim_neg <- tsibble(idx = seq_len(100), y = y_neg, index = idx)
## PUTING THEM ALL TOGETHER FOR A CLEAN COMPARISON
combined_sim <- bind_rows(
sim  |> mutate(coef = "0.6"),
sim2 |> mutate(coef = "0.3"),
sim3 |> mutate(coef = "0.9"),
sim2_neg |> mutate(coef = "-0.3"),
sim_neg |> mutate(coef = "-0.6"),
sim3_neg |> mutate(coef = "-0.9")
)
## PUTING THEM ALL TOGETHER FOR A CLEAN COMPARISON
combined_sim <- bind_rows(
sim  |> mutate(coef = "0.6"),
sim2 |> mutate(coef = "0.3"),
sim3 |> mutate(coef = "0.9"),
sim2_neg |> mutate(coef = "-0.3"),
sim_neg |> mutate(coef = "-0.6"),
sim3_neg |> mutate(coef = "-0.9")
)
## PUTING THEM ALL TOGETHER FOR A CLEAN COMPARISON
combined_sim <- bind_rows(
#sim  |> mutate(coef = "0.6"),
sim2 |> mutate(coef = "0.3"),
sim3 |> mutate(coef = "0.9"),
sim2_neg |> mutate(coef = "-0.3"),
sim_neg |> mutate(coef = "-0.6"),
sim3_neg |> mutate(coef = "-0.9")
)
## PUTING THEM ALL TOGETHER FOR A CLEAN COMPARISON
combined_sim <- bind_rows(
sim  |> mutate(coef = "0.6"),
#sim2 |> mutate(coef = "0.3"),
sim3 |> mutate(coef = "0.9"),
sim2_neg |> mutate(coef = "-0.3"),
sim_neg |> mutate(coef = "-0.6"),
sim3_neg |> mutate(coef = "-0.9")
)
## PUTING THEM ALL TOGETHER FOR A CLEAN COMPARISON
combined_sim <- bind_rows(
sim  |> mutate(coef = "0.6")
#sim2 |> mutate(coef = "0.3"),
#sim3 |> mutate(coef = "0.9"),
#sim2_neg |> mutate(coef = "-0.3"),
#sim_neg |> mutate(coef = "-0.6"),
#sim3_neg |> mutate(coef = "-0.9")
)
## PUTING THEM ALL TOGETHER FOR A CLEAN COMPARISON
combined_sim <- bind_rows(
sim  |> mutate(coef = "0.6"),
sim2 |> mutate(coef = "0.3")
#sim3 |> mutate(coef = "0.9"),
#sim2_neg |> mutate(coef = "-0.3"),
#sim_neg |> mutate(coef = "-0.6"),
#sim3_neg |> mutate(coef = "-0.9")
)
## Firstly Doing autoplot of the original sim
print(sim |> autoplot())
### Running again with a different coefficients#
#y2 <- numeric(100)
#for(i in 2:100)
#  y2[i] <- 0.3*y2[i-1] + e[i]
#sim2 <- tsibble(idx = seq_len(100), y = y2, index = idx)
## With 0.3
print(sim2 |> autoplot())
## Running agina with different coef.
#y3 <- numeric(100)
#for(i in 2:100)
#  y3[i] <- 0.9*y3[i-1] + e[i]
#sim3 <- tsibble(idx = seq_len(100), y = y3, index = idx)
print(sim3 |> autoplot())
### Running again with a different coefficients#
#y2_neg <- numeric(100)
#for(i in 2:100)
#  y2_neg[i] <- -0.3*y2_neg[i-1] + e[i]
#sim2_neg <- tsibble(idx = seq_len(100), y = y2_neg, index = idx)
## With -0.3
print(sim2_neg |> autoplot())
## Running again with a different coefficients#
#y_neg <- numeric(100)
#for(i in 2:100)
#  y_neg[i] <- -0.6*y_neg[i-1] + e[i]
#sim_neg <- tsibble(idx = seq_len(100), y = y_neg, index = idx)
## Running agina with different coef.
#y3_neg <- numeric(100)
#for(i in 2:100)
#  y3_neg[i] <- -0.9*y3_neg[i-1] + e[i]
#sim3_neg <- tsibble(idx = seq_len(100), y = y3_neg, index = idx)
print(sim3_neg |> autoplot())
ing autoplot of the original sim
## Firstly Doing autoplot of the original sim
print(sim |> autoplot())
### Running again with a different coefficients#
#y2 <- numeric(100)
#for(i in 2:100)
#  y2[i] <- 0.3*y2[i-1] + e[i]
#sim2 <- tsibble(idx = seq_len(100), y = y2, index = idx)
## With 0.3
print(sim2 |> autoplot())
## Running agina with different coef.
#y3 <- numeric(100)
#for(i in 2:100)
#  y3[i] <- 0.9*y3[i-1] + e[i]
#sim3 <- tsibble(idx = seq_len(100), y = y3, index = idx)
print(sim3 |> autoplot())
### Running again with a different coefficients#
#y2_neg <- numeric(100)
#for(i in 2:100)
#  y2_neg[i] <- -0.3*y2_neg[i-1] + e[i]
#sim2_neg <- tsibble(idx = seq_len(100), y = y2_neg, index = idx)
## With -0.3
print(sim2_neg |> autoplot())
## Running again with a different coefficients#
#y_neg <- numeric(100)
#for(i in 2:100)
#  y_neg[i] <- -0.6*y_neg[i-1] + e[i]
#sim_neg <- tsibble(idx = seq_len(100), y = y_neg, index = idx)
print(sim_neg |> autoplot())
## Running agina with different coef.
#y3_neg <- numeric(100)
#for(i in 2:100)
#  y3_neg[i] <- -0.9*y3_neg[i-1] + e[i]
#sim3_neg <- tsibble(idx = seq_len(100), y = y3_neg, index = idx)
print(sim3_neg |> autoplot())
y <- numeric(100)
e <- rnorm(100)
for(i in 2:100)
y[i] <- e[i]+0.6*e[i-1]
sim_ma <- tsibble(idx = seq_len(100), y = y, index = idx)
sim_ma |> autoplot()
e <- rnorm(100, sd=1)
for(i in 2:100)
y[i] <- e[i]+0.6*e[i-1]
sim_ma <- tsibble(idx = seq_len(100), y = y, index = idx)
sim_ma |> autoplot()
y <- numeric(100)
e <- rnorm(100, sd=1)
for(i in 2:100)
y[i] <- e[i]+0.6*e[i-1]
sim_ma <- tsibble(idx = seq_len(100), y = y, index = idx)
sim_ma |> autoplot()
# Doing -0.3, -0.6, -0.9, 0.3, 0.6, 0.9
#Original
print(sim_ma |> autoplot())
### Running again with a different coefficients
yma_2 <- numeric(100)
for(i in 2:100)
yma_2[i] <- e[i]+0.3*e[i-1]
simma_2 <- tsibble(idx = seq_len(100), y = yma_2, index = idx)
## With 0.3
print(simma_2 |> autoplot())
# With 0.9
yma_3 <- numeric(100)
for(i in 2:100)
yma_3[i] <- e[i]+0.9*e[i-1]
simma_3 <- tsibble(idx = seq_len(100), y = yma_3, index = idx)
print(simma_3 |> autoplot())
### With -0.3
yma_2_neg <- numeric(100)
for(i in 2:100)
yma_2_neg[i] <- e[i]-0.3*e[i-1]
simma2_neg <- tsibble(idx = seq_len(100), y = yma_2_neg, index = idx)
print(simma2_neg |> autoplot())
## -0.6
yma_neg <- numeric(100)
for(i in 2:100)
yma_neg[i] <- e[i]-0.6*e[i-1]
simma_neg <- tsibble(idx = seq_len(100), y = yma_neg, index = idx)
print(simma_neg |> autoplot())
## With -0.9.
yma3_neg <- numeric(100)
for(i in 2:100)
yma3_neg[i] <- e[i]-0.9*e[i-1]
simma3_neg <- tsibble(idx = seq_len(100), y = yma3_neg, index = idx)
print(simma3_neg |> autoplot())
y_arma <- numeric(100)
e_arma <- rnorm(100, sd=1) #σ2=1
for(i in 2:100)
y_arma[i] <- 0.6*y[i-1] + e[i] + 0.6*e[i-1]
simma3_neg <- tsibble(idx = seq_len(100), y = y_arma, index = idx)
sim_arma |> autoplot()
sim_arma <- tsibble(idx = seq_len(100), y = y_arma, index = idx)
sim_arma |> autoplot()
y_arma <- numeric(100)
e_arma <- rnorm(100, sd=1) #σ2=1
for(i in 2:100)
y_arma[i] <- 0.6*y_arma[i-1] + e[i] + 0.6*e[i-1]
sim_arma <- tsibble(idx = seq_len(100), y = y_arma, index = idx)
#plotting
sim_arma |> autoplot()
y_arma <- numeric(100)
e_arma <- rnorm(100, sd=1) #σ2=1
for(i in 2:100)
y_arma[i] <- 0.6*y_arma[i-1] + e_arma[i] + 0.6*e_arma[i-1]
sim_arma <- tsibble(idx = seq_len(100), y = y_arma, index = idx)
#plotting
sim_arma |> autoplot()
#Generating new ARMA model.
set.seed(123)
y_arma <- numeric(100)
e_arma <- rnorm(100, sd=1) #σ2=1
for(i in 2:100)
y_arma[i] <- 0.6*y_arma[i-1] + e_arma[i] + 0.6*e_arma[i-1]
sim_arma <- tsibble(idx = seq_len(100), y = y_arma, index = idx)
#plotting
sim_arma |> autoplot()
y_ar2 <- numeric(100)
e_ar2 <- rnorm(100)
for(i in 2:100)
y_ar2[i] <- 0.8*y_ar2[i-1] + 0.3*y_ar2[i-2] + e_ar2[i]
y_ar2 <- numeric(100)
e_ar2 <- rnorm(100)
for(i in 2:100)
y_ar2[i] <- 0.8*y_ar2[i-1] + 0.3*y_ar2[i-2] + e_ar2[i]
for(i in 3:100)
y_ar2[i] <- 0.8*y_ar2[i-1] + 0.3*y_ar2[i-2] + e_ar2[i]
sim_ar2 <- tsibble(idx = seq_len(100), y = y_ar2, index = idx)
#plotting
sim_ar2|> autoplot()
e_ar2 <- rnorm(100, sd=1)
for(i in 3:100)
y_ar2[i] <- 0.8*y_ar2[i-1] + 0.3*y_ar2[i-2] + e_ar2[i]
sim_ar2 <- tsibble(idx = seq_len(100), y = y_ar2, index = idx)
#plotting
sim_ar2|> autoplot()
#plotting  ARMA(1,1)
print(sim_arma |> autoplot())
#plotting  ARMA(1,1)
print(sim_arma |> autoplot())
#plotting AR(2)
print(sim_ar2|> autoplot())
aus_airpassengers
aus_airpassengers |> autoplot()
## Using built in ARIMA
fit1 <- aus_airpassengers |>
model(ARIMA(Passengers))
install.packages(urca)
install.packages(urca)
install.packages("urca")
## Using built in ARIMA
fit1 <- aus_airpassengers |>
model(ARIMA(Passengers))
report(fit1)
aus_airpassengers
# plotting first
aus_airpassengers |> autoplot()
## Printing the decision of the model selector function
print(report(fit1))
## Printing the decision of the model selector function
print(report(fit1))
fit
fit1
fit1
print(fit1 |> gg_tsdisplay(y, plot_type='partial', lag=36))
## looking at residuals
gg_tsdisplay(fit1)
## looking at residuals
gg_tsdisplay(fit1)
## looking at residuals
gg_tsresiduals(fit1)
## Predicting the next ten years with the model
print(fit1 |> forecast(h=10) |> autoplot(aus_airpassengers) + labs(y = "Passengers", title = "Australian Air Carrier Passengers"))
#pdq(4,0,0)
drift
## Using built in ARIMA
fit2 <- aus_airpassengers |>
model(ARIMA(Passengers~ pdq(0,1,0)))
## Printing the decision of the model selector function
print(report(fit2))
## looking at residuals
gg_tsresiduals(fit2)
## looking at residuals
gg_tsresiduals(fit2)
## Using built in ARIMA
fit2 <- aus_airpassengers |>
model(ARIMA(Passengers~ pdq(0,1,0)+drift()))
library(fable)
## Using built in ARIMA
fit2 <- aus_airpassengers |>
model(ARIMA(Passengers~ pdq(0,1,0)+drift()))
## Printing the decision of the model selector function
print(report(fit2))
## Using built in ARIMA
fit2 <- aus_airpassengers |>
model(ARIMA(Passengers~ pdq(0,1,0) + drift()))
## Printing the decision of the model selector function
print(report(fit2))
## Using built in ARIMA
fit2 <- aus_airpassengers |>
model(ARIMA(Passengers~ pdq(0,1,0), include.drift=TRUE))
## Printing the decision of the model selector function
print(report(fit2))
## Using built in ARIMA
fit2 <- aus_airpassengers |>
model(ARIMA(Passengers~ pdq(0,1,0)))
## Printing the decision of the model selector function
print(report(fit2))
## Using built in ARIMA
fit2 <- aus_airpassengers |>
model(ARIMA(Passengers~ pdq(0,1,0)),, include.drift=TRUE)
library(fable)
## Using built in ARIMA
fit2 <- aus_airpassengers |>
model(ARIMA(Passengers~ pdq(0,1,0))+drift())
## Using built in ARIMA
fit2 <- aus_airpassengers |>
model(ARIMA(Passengers~ pdq(0,1,0)))
#library(fable)
library(feasts)
## Using built in ARIMA
fit2 <- aus_airpassengers |>
model(ARIMA(Passengers~ pdq(0,1,0)))
## Using built in ARIMA
fit2 <- aus_airpassengers |>
model(ARIMA(Passengers~ pdq(0,1,0) +drift()))
## Printing the decision of the model selector function
print(report(fit2))
#library(fable)
## Using built in ARIMA
fit2 <- aus_airpassengers |>
model(ARIMA(Passengers~ pdq(0,1,0) +drift()))
#library(fable)
## Using built in ARIMA
fit2 <- aus_airpassengers |>
model(ARIMA(Passengers~ pdq(0,1,0) +drift()))
## Using built in ARIMA
fit2 <- aus_airpassengers |>
model(ARIMA(Passengers~ pdq(0,1,0) +drift()))
### using Box Cox to get ideal transform value.
lambda <- us_gdp |>
features(GDP, features = guerrero) |>
pull(lambda_guerrero)
print(lambda) ## 0.083 ## inbetween sq root and now transform.
## Looks better.
print(us_gdp |>  autoplot(box_cox(GDP, lambda)) +  labs(y = "",title = latex2exp::TeX(paste0("BoxCox Transformed Retail Turnover",round(lambda,2)))))
#Getting the ideal model using ARIMA
fit_usgdp <- us_gdp |>  model(ARIMA(box_cox(GDP, lambda)))
report(fit_usgdp)
## Using built in ARIMA
fit2 <- aus_airpassengers |>  model(Arima((Passengers~ pdq(0,1,0) ~ drift() ))
## Printing the decision of the model selector function
print(report(fit2))
## Using built in ARIMA
fit2 <- aus_airpassengers |>  model(Arima((Passengers~ pdq(0,1,0) ~ drift() )))
## Using built in ARIMA
fit2 <- aus_airpassengers |>  model(ARIMA((Passengers~ pdq(0,1,0) ~ drift() )))
## Using built in ARIMA
fit2 <- aus_airpassengers |>  model(ARIMA((Passengers ~ pdq(0,1,0) ~ drift() )))
## Using built in ARIMA
fit2 <- aus_airpassengers |>  model(ARIMA((Passengers ~ pdq(0,1,0) ))) #
## Printing the decision of the model selector function
print(report(fit2))
## Using built in ARIMA
fit2 <- aus_airpassengers |>  model(ARIMA(Passengers ~ pdq(0,1,0)+drift() )) #
## Printing the decision of the model selector function
print(report(fit2))
## Going to do ARIMA(2,1,0); so one differencing and 2 look back wieghtings
fit_usgdp2 <- us_gdp |>  model(ARIMA(box_cox(GDP, lambda) ~ pdq(2,1,0)))
report(fit_usgdp2)
## Using built in ARIMA
fit2 <- aus_airpassengers |>  model(ARIMA(Passengers ~ pdq(0,1,0) + drift() )) #
#Looking at residuals
ddt_residuals(fit_usgdp)
#Looking at residuals
ggt_residuals(fit_usgdp)
#Looking at residuals
gg_tsresiduals(fit_usgdp)
# Forcasting with the chosen models.
print(fit_usgdp |> forecast(h=10) |> autoplot(us_gdp) + labs(y = "GDP", title = "United States GDP Forcase"))
us_gdp_ets <- us_gdp |>  model(ETS(GDP))
report(us_gdp_ets)
print(report(us_gdp_ets))
print(us_gdp_ets |> forecast(h=10) |> autoplot(us_gdp) + labs(y = "GDP", title = "United States GDP Forcast (ETS)"))
## Using built in ARIMA
fit2 <- aus_airpassengers |>  model(ARIMA(Passengers ~ pdq(0,1,0) + drift() )) #
## Printing the decision of the model selector function
print(report(fit2))
fit3 <- aus_airpassengers |>  model(ARIMA(Passengers ~ pdq(2,1,2) + drift() )) #
#library(MASS)
library(fable)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(fable)
library(fpp3)
fit3 <- aus_airpassengers |>  model(ARIMA(Passengers ~ pdq(2,1,2) + drift() )) #
print(report(fit3))
fit3 <- aus_airpassengers |>  model(ARIMA(Passengers ~ pdq(2,1,2), drift() )) #
fit3 <- aus_airpassengers |>  model(ARIMA(Passengers ~ pdq(2,1,2) ~ drift() )) #
fit3 <- aus_airpassengers |>  model(ARIMA(Passengers ~ pdq(2,1,2) + drift() )) #
fit3 <- aus_airpassengers |>  model(ARIMA(Passengers ~ pdq(2,1,2) + drift() )) #
fit3 <- aus_airpassengers |>  model(ARIMA(Passengers ~ pdq(2,1,2))+ drift() )) #
fit3 <- aus_airpassengers |>  model(ARIMA(Passengers ~ pdq(2,1,2))+ drift() ) #
fit3 <- aus_airpassengers |>  model(ARIMA(Passengers ~ pdq(2,1,2))+ drift() ) #
fit3 <- aus_airpassengers |>  model(ARIMA(Passengers ~ pdq(2,1,2)) ~drift() ) #
library(fabletools)
fit3 <- aus_airpassengers |>  model(ARIMA(Passengers ~ pdq(2,1,2)) ~drift() ) #
fit3 <- aus_airpassengers |>   model(ARIMA(Passengers ~ pdq(2,1,2) + drift()))
print(report(fit3))
fit3 <- aus_airpassengers |>   model(ARIMA(Passengers ~ pdq(2,1,2) + drift()))
## Using built in ARIMA
fit2 <- aus_airpassengers |>  model(ARIMA(Passengers ~ pdq(0,1,0) + drift() )) #
fit4 <- aus_airpassengers |>  model(ARIMA(Passengers ~ 1+ pdq(0,2,1) )) #
print(report(fit4))
print(fit4 |> forecast(h=10) |> autoplot(aus_airpassengers) + labs(y = "Passengers", title = "Australian Air Carrier Passengers"))
library(forecast)
install.packages("forecast")
install.packages("forecast")
library(forecast)
# Assuming you have a time series data called 'ts_data'
fit3 <- Arima(aus_airpassengers, order = c(2,1,2), include.drift = TRUE)
print(report(fit3))
# Assuming you have a time series data called 'ts_data'
fit3 <- Arima(aus_airpassengers, order = c(2,1,2), include.drift = TRUE)
# Assuming you have a time series data called 'ts_data'
fit3 <- Arima(aus_airpassengers$Passengers, order = c(2,1,2), include.drift = TRUE)
print(report(fit3))
# Assuming you have a time series data called 'ts_data'
fit3 <- Arima(aus_airpassengers, order = c(2,1,2), include.drift = TRUE)
# Assuming you have a time series data called 'ts_data'
fit3 <- Arima(aus_airpassengers, order = c(2,1,2), include.drift = TRUE)
# Assuming you have a time series data called 'ts_data'
fit3 <- Arima(aus_airpassengers, order = c(2,1,2))
# Assuming you have a time series data called 'ts_data'
fit3 <- forecast::Arima(aus_airpassengers, order = c(2,1,2))
fit3 <- aus_airpassengers |>   model(ARIMA(Passengers ~ 1+ pdq(2,1,2)))
print(report(fit3))
## Using built in ARIMA
fit2 <- aus_airpassengers |>  model(ARIMA(Passengers ~ 1+ pdq(0,1,0) )) #
## Predicting the next ten years with the model
print(fit2 |> forecast(h=10) |> autoplot(aus_airpassengers) + labs(y = "Passengers", title = "Australian Air Carrier Passengers"))
## looking at residuals
gg_tsresiduals(fit1)
#Residuals
print(gg_tsresiduals(fit2))
## Predicting the next ten years with the model
print(fit2 |> forecast(h=10) |> autoplot(aus_airpassengers) + labs(y = "Passengers", title = "Australian Air Carrier Passengers"))
## Predicting the next ten years with the model
print(fit1 |> forecast(h=10) |> autoplot(aus_airpassengers) + labs(y = "Passengers", title = "Australian Air Carrier Passengers"))
fit3 <- aus_airpassengers |>   model(ARIMA(Passengers ~ 1+ pdq(2,1,2)))
print(report(fit3))
print(gg_tsresiduals(fit2))
print(gg_tsresiduals(fit3))
#Residuals
print(gg_tsresiduals(fit2))
#Forecase
print(fit3 |> forecast(h=10) |> autoplot(aus_airpassengers) + labs(y = "Passengers", title = "Australian Air Carrier Passengers"))
## Predicting the next ten years with the model
print(fit2 |> forecast(h=10) |> autoplot(aus_airpassengers) + labs(y = "Passengers", title = "Australian Air Carrier Passengers"))
fit3_nc <- aus_airpassengers |>   model(ARIMA(Passengers ~ pdq(2,1,2)))
print(report(fit3_nc))
print(gg_tsresiduals(fit3_nc))
#Forecast
print(fit3_nc |> forecast(h=10) |> autoplot(aus_airpassengers) + labs(y = "Passengers", title = "Australian Air Carrier Passengers"))
fit3_nc <- aus_airpassengers |>   model(ARIMA(Passengers ~ pdq(2,1,2)))
fit4 <- aus_airpassengers |>  model(ARIMA(Passengers ~ 1+ pdq(0,2,1) )) #
## pritnign report
print(report(fit4))
print(fit4 |> forecast(h=10) |> autoplot(aus_airpassengers) + labs(y = "Passengers", title = "Australian Air Carrier Passengers"))
## Residuals
print(gg_tsresiduals(fit4))
## Forecast
print(fit4 |> forecast(h=10) |> autoplot(aus_airpassengers) + labs(y = "Passengers", title = "Australian Air Carrier Passengers"))
